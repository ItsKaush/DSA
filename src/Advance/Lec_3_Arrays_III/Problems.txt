Q1. Given a vector A of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

    Problem Constraints
    1 <= |A| <= 100000

    eg: A =  0, 1, 0 2
    Output: 1

    eg: A =  1, 2
    Output: 0

    Idea: find max from right and max from left,
          for each element it can store the water = min(max_left, max_right) - height of element

    eg: A =    0, 1, 0, 2
    max_left = 0, 1, 1, 2
    max_right= 2, 2, 2, 2
    water =
                  i           water stored = 0
                     i        water stored = 1

Q2. Given a collection of intervals, merge all overlapping intervals.

    Problem Constraints
    1 <= Total number of intervals <= 10000

         s e
    eg: [1,3],[2,6],[8,10],[15,18]
       0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19
          -------
             -------------
                               --------
                                                         --------------

    to check if an interval is overlapping:
        left = start = 1 Right = end = 3  6
        If start of second interval is less than right then its overlapping
            And if its overlapping then check if end is greater than right if yes then update right as end

        If start of second interval is greater than right then print this interval as it is.

Q3. You have a set of non-overlapping intervals. You are given a new interval [start, end], insert this new interval into the set of intervals (merge if necessary).
    You may assume that the intervals were initially sorted according to their start times.

    Problem Constraints
    0 <= |intervals| <= 105

    eg: [1, 3], [6, 9]
    insert and merge [2, 5] in sorted order
    [1, 5], [6, 9]

     Idea: find the start and end of merged interval
              add all intervals left to start
              add the merged interval
              add all intervals right to end
              edge Case: If there is no overlapping then add the interval at its correct position


Q4. Given an array of non-negative integers A where each element represents your maximum jump length at that position.
    The initial position is the first index of the array, and the goal is to reach the last index of the array with the minimum number of jumps.
    Note: If it is not possible to reach the last index, return -1 instead.

    Problem Constraints
    1 <= length of the array <= 100000
    0 <= A[i] <= 10^9

    eg: A = 3 4 2 1 2 1
    Output: 2


