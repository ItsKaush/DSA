Notes:
    Prefix sum of 2-D Matrix:
     eg A : 1 2 3
            4 5 6
            7 8 9
        B : 1  3   6
            5  12  21
            12 27  45
        prefix_sum[i][j] = A[i][j] + B[i-1][j] + B[i][j-1] - B[i-1][j-1]

        For any i,j in A, need to add the A[i][j] and prefix sum of i-1,j and i,j-1 and subtract the prefix sum of i-1,j-1 just to avoid
        double counting.

     All submatrix in a matrix:
        total number of submatrix in a matrix = (n*(n+1)/2) * (m*(m+1)/2) (there will be n*(n+1)/2 submatrix in a row and
        m*(m+1)/2 submatrix in a column)

        Contribution of each element in a all submatrix is:
           all the submatrix which is starting from left and top of the element = (i+1)*(j+1)
           all the submatrix which is ending at right and bottom of the element = (n-i)*(m-j)
              total submatrix in which the element is present = (i+1)*(j+1)*(n-i)*(m-j)

Q1. Problem Description
    Given a 2D Matrix A of dimensions N*N, we need to return the sum of all possible submatrices.

    Problem Constraints
    1 <= N <=30
    0 <= A[i][j] <= 10

    eg: A = [ [1, 2]
              [3, 4] ]

    All submatrix :
        1 = 1
        2 = 2
        3 = 3
        4 = 4
        1+2 = 3
        3+4 = 7
        1+3 = 4
        2+4 = 6
        1+2+3+4 = 10
        total = 40

        Brute force: generate all submatrix and add all the elements in each submatrix
        psuedo Code:
            for(int i --> 0 - n-1)
              for(int j --> 0 - n-1))
                  //got the top left
                    for(int k --> i - n-1)
                        for(int l --> j - n-1)
                            //got the bottom right
                            for(int x --> i - k)
                                for(int y --> j - l)
                                    //got the submatrix
                                    sum += A[x][y]

        Time Complexity: O(n^6)

        Optimization: Contribution technique.
        for any i, j in A.
               i
            1  2
        j   4  5

        Contribution of 1 in 4 submatrix = 1 * 4 = 4
        Contribution of 2 in 4 submatrix = 2 * 4 = 8
        Contribution of 3 in 4 submatrix = 3 * 4 = 12
        Contribution of 4 in 4 submatrix = 4 * 4 = 16
        Total = 40

Prefix Sum matrix:
               i
            1  3
        j   7  12

        Contribution of any element at j will be in all the submatrix which starts left (0 to i) and top (0 to j) (inclusive and zero based indexing)
        of the element and ends at right (i to n-1) and bottom (j to m-1) of the element.

        = (i-0+1)(j-0+1)(n-1-i+1)(m-1-j+1)
        = (i+1)(j+1)(n-i)(m-j)

        for 1 i=1, j=0 = (0+1)*(0+1)*(2-0)*(2-0) = 4
        for 2 i=0, j=1 = (0+1)*(1+1)*(2-0)*(2-1) = 1*2*2*1 = 4
        for 3 i=1, j=0 = (1+1)*(0+1)*(2-1)*(2-0) = 2*1*1*2 = 4
        for 4 i=1, j=1 = (1+1)*(1+1)*(2-1)*(2-1) = 2*2*1*1 = 4

        perfect.

        so the main idea is to, all subarrays which start from 0 to i and 0 to j and ends at i to n-1 and j to m-1.
        All possible ways to select the top left = (last-start+1)= (i-0+1) * (j-0+1)= (i+1) * (j+1)
        All possible ways to select the bottom right = (last-start+1)= (n-1-i+1) * (m-1-j+1)= (n-i) * (m-j)

Q2. Given a matrix of integers A of size N x M and multiple queries Q, for each query, find and return the submatrix sum.
    Inputs to queries are top left (b, c) and bottom right (d, e) indexes of submatrix whose sum is to find out.
    NOTE:

    Rows are numbered from top to bottom, and columns are numbered from left to right.
    The sum may be large, so return the answer mod 109 + 7.
    Also, select the data type carefully, if you want to store the addition of some elements.
    Indexing given in B, C, D, and E arrays is 1-based.
    Top Left 0-based index = (B[i] - 1, C[i] - 1)
    Bottom Right 0-based index = (D[i] - 1, E[i] - 1)

    eg : A = [ [1, 2, 3]
              [4, 5, 6]
              [7, 8, 9] ]
        B = [1, 2]
        C = [1, 2]
        D = [2, 3]
        E = [2, 3]

        submatrix sum for top left->B[0]C[0], bottom right-> D[1]E[1] = 1+2+4+5 = 12
        submatrix sum for top left->B[1]C[1], bottom right-> D[2]E[2] = 5+6+8+9 = 28

        return [12, 28]

        Brute force: for each sub query iterate in array and add the elements in the submatrix
        psuedo Code:
            for(query --> 0 - B.length-1)
                for(int i --> B[0]-1 to D[0]-1)
                  for(int j --> C[0]-1 - E[0]-1))
                       sum += A[i][j]

        Time Complexity: O(Q*n*m)

        Optimization: Prefix matrix sum:

        A = [ [1, 2, 3]
              [4, 5, 6]
              [7, 8, 9] ]

        pf= [ [1, 3, 6]
              [5, 12, 21]
              [12, 27, 45] ]   = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 -

        How to get the prefix sum of any element at i,j in A?
        eg: i=1, j=1 = 5
            = A[i][j] + pf[i-1][j] + pf[i][j-1] - pf[i-1][j-1]

        edge case: for first row and first column, there is no element at i-1 and j-1, so we need to handle that case.
        when i = 0, pf[i][j] = A[i][j] + pf[i][j-1]
        when j = 0, pf[i][j] = A[i][j] + pf[i-1][j]
        when i = 0 and j = 0, pf[0][0] = A[i][j]

        Once fount the pf matrix sum then iterate over query and find the sum of submatrix.

        pf of bottom right - pf of top left

        pf[D[k]-1][E[k]-1] - pf[B[k]-1][C[k]-1]

        pf[1][1] - pf[0-1][0-1] = 12 - 0 = 12
        pf[2][2] - pf[0][2] - pf[2][0] + pf[0-1][0-1] = 45 - 6 - 12 + 1 = 45 - 18 + 1 = 45 - 17 = 28

        if top left is x1,y1 and bottom right is x2,y2 then

        Ans = pf[x2][y2] - pf[x1-1][y2] - pf[x2][y1-1] + pf[x1-1][y1-1]

        x1 = B[k]-1, y1 = C[k]-1, x2 = D[k]-1, y2 = E[k]-1
        x1 = 1, y1 = 1, x2 = 2, y2 = 2

        Ans = pf[2][2] - pf[0][2] - pf[2][0] + pf[0][0]
            = 45 - 6 - 12 + 1
            = 45 - 18 + 1
            = 45 - 17
            = 28

        if x1=0 then pf[x2][y2] - pf[x2][y1-1]
        if y1=0 then pf[x2][y2] - pf[x1-1][y2]
        if x1=0 and y1=0 then pf[x2][y2]

        Time Complexity: O(n*m + Q)

        Final Idea: for any query if top left is x1,y1 and bottom right is x2,y2 then
        its sum = pf[x2][y2] - pf[x1-1][y2] - pf[x2][y1-1] + pf[x1-1][y1-1] {Handle the edge cases}


Q3. Given a 2D integer matrix A of size N x N, find a B x B submatrix where B<= N and B>= 1, such that the sum of all the elements in the submatrix is maximum.

    Problem Constraints
    1 <= N <= 10^3.
    1 <= B <= N
    -102 <= A[i][j] <= 102.

            row = 5 B = 3
    eg: A = [    0  1  2  3  4
                [1, 1, 1, 1, 1]
                [2, 2, 2, 2, 2]
                [3, 8, 6, 7, 3]
                [4, 4, 4, 4, 4]
                [5, 5, 5, 5, 5]
             ]
         B = 3

    Idea: find the prefix sum matrix, then iterate over the matrix and find the sum of submatrix of size B*B and return the maximum sum.

    Time Complexity: O(n*m + n*m)

    to find the sum of submatrix of size B*B = O(n*m)
        submatrix left top will go from 0 to n-B+1 and 0 to m-B and bottom right will go from B to n and B to m

        for any i,j, x1 = i, y1 = j x2 = i+B-1, y2 = j+B-1


Q4. Given an integer A, generate a square matrix filled with elements from 1 to A^2 in spiral order and return the generated square matrix.

    Problem Constraints
    1 <= A <= 1000

    eg: A = 3
        Ans = [ [1, 2, 3]
                [8, 9, 4]
                [7, 6, 5] ]

        Idea: will start from first row iterate over column and fill all the element --> i = 0 j = 0 to n-1      i = start_row
                                                                                                                 j --> start_column to end_column once done update start row++
                1 2 3
              will start from last column iterate over row and fill all the element --> j = n-1 i = 1 to n-1     j = end column
                                                                                                                 i --> start_row to end_row once done update end column--:
                1 2 3
                    4
                    5
              will iterate over last row from last column to first column and fill all the element --> i = n-1 j = n-2 to 0   i = end_row
                                                                                                                              j --> end_column to start_column once done update end row--:
                1 2 3
                    4
                7 6 5
              will iterate over first column from last row to first row and fill all the element --> j = 0 i = n-2 to 1   j = start_column
                                                                                                                          i --> end_row to start_row once done update start column++:
                1 2 3
                6   4
                7 8 5

              keep doing above till start row <= end row and start column <= end column

Q5. Given an array of integers A and an integer B, find and return the minimum number of swaps required to bring all the numbers less than or equal to B together.
    Note: It is possible to swap any two elements, not necessarily consecutive.

    Problem Constraints
    1 <= length of the array <= 100000
    -10^9 <= A[i], B <= 10^9

            0   1  2   3   4  5   6    n = 7
    eg: A = 1, 12, 10, 3, 14, 10, 5
            i       j                  num of element less than B = 1  swap req = 2
               i       j               num of element less than B = 1
                    i      j           num of element less than B = 1
                       i       j       num of element less than B = 1
                          i       j    num of element less than B = 1

        A = 5, 17, 100, 11  num of element less than B = 3
            i       j
               i       j

        Idea: find number of element less than B, create a window of size number of element less than B and find the minimum number of element which are greater than B in each window.
        For first window find the swap required, which will be count of num greater than B
        for each consecutive window if element which is going out from left is greater than B and element coming in from right is less than B then decrease the swap required
        if element which is going out from left is less than B and element coming in from right is greater than B then increase the swap required


Q6. Given an array of integers A of size N that is a permutation of [0, 1, 2, ..., (N-1)].
    It is allowed to swap any two elements (not necessarily consecutive).
    Find the minimum number of swaps required to sort the array in ascending order.

    Problem Constraints
    1 <= N <= 100000
    0 <= A[i] < N

           0, 1, 2, 3, 4
    eg: A: 1, 2, 3, 4, 0

    Idea: 1 should be at 1, 2 should be at 2 like wise 0 should be at 0
    element at ith position should be i itself.
    if not then swap it with the element at A[i] position and increment the swap count.

    Time Complexity: O(n)

















