Q1. Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.
    If the answer does not exist return an array with a single integer "-1".
    First sub-array means the sub-array for which starting index in minimum.

    Problem Constraints
    1 <= length of the array <= 100000
    1 <= A[i] <= 10^9
    1 <= B <= 10^9

    eg.
    input =  A = [1, 2, 3, 4, 5]  B = 5
         pfSum = 1 3 6 10 15
                 i              a = 1 b = 6

         index_map: 1 - 1
                   3 - 1
                   6 - 1
                   10 - 1
                   15 - 1

        target = 5
        b - a = B
        b = a + B

         Now need to find
            1. a element which is equal to B
                # If found then subarray will be from start till that element
            2. find the two elements whose difference is B
                # If found then subarray will be from ith index to the index of second element

         sfSum = 15 14 12 9 5

    Brute force: generate all the subarrays and  find sum of each subarrays TC: O(N^3)

    Optimization: Store the prefixSum elements and their indexes in an index map.
    check if B present in index map then get its index --> return the subarray from 0 to index
    for each element in prefix sum array check if B + pfsum[i] present in map or not.

Q2. Given an array A of integers and another non negative integer B .
    Find if there exists 2 indices i and j such that A[i] - A[j] = B and i != j.

    Problem Constraints
    1 <= |A| <= 10^6
    0 <= A[i] <= 10^9
    0 <= B <= 10^9

    eg:
    input : A = [1, 5, 3] B = 2

    for each element check in freq map
        if both target and target + a are equal then freq should be equal or greater than 2
        if both are not same then freq should be equal or greater than 1

Q3. You are given an array of N integers, A1, A2 ,..., AN and an integer B. Return the count of distinct numbers in all windows of size B.
    Formally, return an array of size N-B+1 where i'th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,..., Ai+B-1.
    NOTE: if B > N, return an empty array.

    Problem Constraints
    1 <= N <= 10^6
    1 <= A[i] <= 10^9

    eg:
    input : A = [1, 2, 1, 3, 4, 3]  B = 3

    Brute force: for each window iterate and count no of distinct elements
    TC: O(N^2)

    Optimization: Use hashmap to store the frequency of first window
                  iterate from i to j till last window and remove the previous (i-1) element (reduce its frequency, if freq is zero remove the element)
                  and add the j+1 element (if exists increase frequency if not then add element with freq 1)
                  at end keep adding the size of map in ans array

Q4. Given an array of integers, find two numbers such that they add up to a specific target number.
    The function twoSum should return indices of the two numbers such that they add up to the target, where index1 < index2.
    Please note that your returned answers (both index1 and index2 ) are not zero-based. Put both these numbers in order in an array and return the array from
    your function ( Looking at the function signature will make things clearer ). Note that, if no pair exists, return empty list.
    If multiple solutions exist, output the one where index2 is minimum. If there are multiple solutions with the minimum index2, choose the one with minimum index1 out of them.

    Input: [2, 7, 11, 15], target=9
    Output: index1 = 1, index2 = 2

    Idea; same as q 2. here need to check the sum only
          Create a hashmap and store the frequency and from hashmap get both the elements then again iterate in array and get the index of both element
          else
            store the list of index in hashmap and from hashmap only get the index



