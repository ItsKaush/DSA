Q1. Find the maximum sum of contiguous non-empty subarray within an array A of length N.

    Problem Constraints
    1 <= N <= 1e6
    -1000 <= A[i] <= 1000

    eg. A: [1, 2, 3, 4, -10]
            i                max_sum = 10
               i             max_sum = 9
                  i          max_sum = 7
                     i       max_sum = 4
                         i   max_sum = -10
    Brute force: generate all sub arrays and find sum, and keep record of max sum array
    for(int i=0; i<n; i++)//start of subarray
    {
        for(int j=i; j<n; j++){//end of subarray
            for(int k=i; k<=j; k++){
             sum += A[k];
            }
            max_sum = Math.max(max_sum,sum);
        }
    }
    TC: O(N^3)

    Optimization: Addition part can be done in O(1) using the prefix sum array but still the TC will be O(N^2)

    Kadanes Algorithm: Keep record of current max by adding curr element into it, also keep record of max so far and store the max curr max into it.
                       whenever current max becomes negative make it zero, and whenever max so far is less than current max update the max_so_far with current max

    eg. A: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
            i                              max_end_here= -2 0   max_so_far= -2
                i                          max_end_here= 1      max_so_far = 1
                   i                       max_end_here= -2 0   max_so_far = 1
                      i                    max_end_here= 4      max_so_far = 4
                         i                 max_end_here= 3      max_so_far = 4
                            i              max_end_here= 5      max_so_far = 5
                                i          max_end_here= 6      max_so_far = 6
                                   i       max_end_here= 1      max_so+far = 6
                                      i    max_end_here= 5      max_so_far = 6

Q2. You are given an integer array A of length N.
    You have to find the sum of all subarray sums of A.
    More formally, a subarray is defined as a contiguous part of an array which we can obtain by deleting zero or more elements from either end of the array.
    A subarray sum denotes the sum of all the elements of that subarray.

    Note : Be careful of integer overflow issues while calculations. Use appropriate data types.

    Problem Constraints
    1 <= N <= 105
    1 <= Ai <= 10 4

    //Brute force: same as above, generate all the subarray find their sum and keep adding them till the last subarray. TC = O(N^3)
               0  1  2
    eg: A:    [1, 2, 3]
    subarray:  1         sum= 1
               1, 2      sum= 3 total sum= 4
               1, 2, 3   sum= 6 total sum= 10
               2         sum= 2 total sum = 12
               2, 3      sum= 5 total sum = 17
               3         sum= 3 total sum = 20

    Observation: every element are getting again and again, like 1 is getting added in all the subarray which starts from 0, 2 is getting added in all the subarray which starts from
                before 2 and ends after two
                1 contribution: start-1 end-3  total= 3
                2 contribution: start-2 end-2  total= 8
                3 contribution: start-3 end 1  total= 9
                                               ans = 20

                for any element at ith place, its contribution is in all teh subarrays which starts from (0 to i) and end at(i to n-1)
                total number of subarrays in which ith element is contributing = (i+1) * (n-i)
                and contribution is: A[i] * (i+1) * (n-i)

Q3. Problem Description
    Given an array of size N, find the subarray of size K with the least average.

    Problem Constraints
    1<=k<=N<=10^5
    -10^5<=A[i]<=10^5

    Return the index of the first element of the subarray of size k that has least average.
    Array indexing starts from 0.
           0, 1, 2,  3,  4,  5,  6
    eg: A=[3, 7, 90, 20, 10, 50, 40] B=3
     pfA=  3  10 100 120 130 180 220
           i                          sum of subarray= pf[i+B-1] = 100 avg = 100/3
              i                       sum of subarray= pf[i+B-1] - pf[i-1] = 120 - 2 = 117
                 i                    sum of subarray= pf[4] = pf[1] = 130 - 10 = 120
                     i                sum of subarray= 180-100 = 80
                         i            sum of subarray= 220 - 120 = 100


    BruteForce: find the subarray of all size k and get their average and store min along with the subarray. TC:O(N^2)
    Optimization: create a prefix array and do not need to add iteratively new TC: O(N). SC: O(N)

Q4. Given an array A of N non-negative numbers and a non-negative number B,
    you need to find the number of subarrays in A with a sum less than B.
    We may assume that there is no overflow.

    Problem Constraints
    1 <= N <= 10^3
    1 <= A[i] <= 1000
    1 <= B <= 10^7

    eg. A: [2, 5, 6]
    Brute Force: find all subarrays and get their sum, if sum is less than B increase ans. TC: O(N^3)

    Optimization: use Kadane algorithm, keep finding current sum, if it is less than B then reduce the contribution of that element else keep increasing the no of subarrays
    A: [2, 5, 6] B= 10
        i         current sum = 2  n = 1 no of subarrayes = 1
          i       current sum = 7  n = 2 no of subaarays = 2*(2+1)/2 = 3
             i    current sum =13 0  n = 0 no of subarrays = 0
                i current sum = 2    n = 1 no of subarrays = 1

    A = [1, 11, 2, 3, 15] B = 10 current sum = 0 , n = 0, subarrays = 0
         i                                     1       1              1
            i                                  12 0    0              0
               i                               2       1              0
                   i                           5       2              3
                      i                        20 0    0              0

    Observation: whenever current sum is ess than target then keep increasing n when current sum becomes zero find the no of subarrays which will be formed using n
                 when current sum becomes zero then reset the n.

    Note: Kadane will not work here, need to do it using all subarrays and then find the sum using prefix so final TC: O(N^2) and SC: O(N)

Q5. You are given an integer array A of length N comprising of 0's & 1's, and an integer B.
    You have to tell all the indices of array A that can act as a center of 2 * B + 1 length 0-1 alternating subarray.
    A 0-1 alternating array is an array containing only 0's & 1's, and having no adjacent 0's or 1's. For e.g. arrays [0, 1, 0, 1], [1, 0] and [1] are 0-1 alternating,
    while [1, 1] and [0, 1, 0, 0, 1] are not.

    1 <= N <= 10^3
    A[i] equals to 0 or 1.
    0 <= B <= (N - 1) / 2

    eg. A: [1, 0, 1, 0, 1] B: 1
               i           index: 1
                  i        index: 2
                     i     index: 3

       A: [0, 0, 0, 1, 1, 0, 1] B: 0
       need zero element on left and right means all teh indexes will be in ans

       Observation:
            1. iteration will start from i = B
            2. Iterate on left till B and check if they are alternate
            3. same iterate on right till B and check if they are alternate

























