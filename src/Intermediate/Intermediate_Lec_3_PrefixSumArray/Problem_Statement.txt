Q1. You are given an array A of integers of size N.

    Your task is to find the equilibrium index of the given array
    The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.
    If there are no elements that are at lower indexes or at higher indexes, then the corresponding sum of elements is considered as 0.

    Note:
    Array indexing starts from 0.
    If there is no equilibrium index then return -1.
    If there are more than one equilibrium indexes then return the minimum index.

    eq. A    = -7, 1, 5, 2, -4, 3, 0
p_Left_sum   =  -7 -6 -1 1  -3  0  0
P_Right_sum  =  0  7  6  1  -1  3  0

Idea : find prefix sum from left and right index where both the array contain same element is the desired index

Q2. Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices makes the sum of
    even-indexed and odd-indexed array elements equal.

    Problem Constraints
    1 <= n <= 10^5
    -10^5 <= A[i] <= 10^5
             0  1  2  3       0 1 2
    eg.  A = 2, 1, 6, 4       2 1 6
    index  = 0  1  2  3
    sumeven= 2  2  8  8
    sumodd = 0  1  1  5
                      i    right even sum = oddsum(n-1)-oddsum(i); right oddsum = evensum(n-1) - evensum(i)  ---- i =0
                                               5      -    0                          8      -     2
                                               5                                       6
                           even sum = left even sum + right even sum          odd sum = left odd sum + right odd sum             --------- i between 0 to n-1
                                      evensum[i-1] + (oddsum[n-1] - oddsum[i])          oddsum[i-1] + (evensum[n-1] - evensum[i])
                                            2    +     ( 5 - 1 )                                 0 +   (8 - 2)
                                            6                                                        6
                           even sum =  evensum[i-1] + oddsum[n-1] - oddsum[i]   odd sum = oddsum[i-1] + evensum[n-1] - evensum[i]
                                          2         +    5       -    1                     1         +   8     -     8
                                          6                                                  1
                            evensum = evensum[i-1]        oddsum = oddsum[i-1]    ----- i = n-1
                                        8                              1

    eg. A = 1, 1, 1
    index = 0  1  2
    sumeven=1  1  2
    sumodd= 0  1  1

Idea : After removing an element the even will become odd and odd will become even (only on right of index which is getting deleted).
       Need to find even sum of left and odd sum of right
       and odd sum of left with even sum of right of the current index
       check both if they are equal increase the ans.

      #. when i is zero then find sum only from right
      #. when i is n-1 then find sum only from left
      #. when i is between 0 and n-1 the right indexes will change from even to odd

Q3.   You are given an integer array A of size N.
      You have to perform B operations. In one operation, you can remove either the leftmost or the rightmost element of the array A.
      Find and return the maximum possible sum of the B elements that were removed after the B operations.

      NOTE: Suppose B = 3, and array A contains 10 elements, then you can:
      Remove 3 elements from front and 0 elements from the back, OR
      Remove 2 elements from front and 1 element from the back, OR
      Remove 1 element from front and 2 elements from the back, OR
      Remove 0 elements from front and 3 elements from the back.

      Problem Constraints
      1 <= N <= 10^5
      1 <= B <= N
      -10^3 <= A[i] <= 10^3

      e.g. --> A= 5 , -2, 3, 1, 2 B= 4
                left - 4 right 0 sum = 7
                left - 1 right 3 sum = 11
                left - 2 right 2 sum = 6
                left - 3 right 1 sum = 8
                left - 0 right 4 sum = 4
                max sum = 11
                Brute force - iterate from left and right 0 to i and j = n-1 to B-i  and store the max sum TC--> n^2 --> 10^10 fail

                to get the sum use prefix sum for o to i and n-1 to B-i
                    0 1 2 3 4
                pA= 5 3 6 7 9 i-->  <--j
                               0     4 sum = leftsum + rightsum
                                                0 +    PA[n-1] -PA[n-j-1]
                                                0 +     9 - 5
                                                4
                               1     3           PA[i-1] + PA[n-1] - PA[n-j-1]
                                                  5  +    9 - 3
                                                  11
                               2      2           3  + 9 - 6
                                                   6
                               3      1            6 + 9 - 7
                                                   8
                               4      0            7  + 9 - 9
                                                   7
Q4. Problem Description
    Given an integer array A of size N. In one second, you can increase the value of one element by 1.
    Find the minimum time in seconds to make all elements of the array equal.

    Problem Constraints
    1 <= N <= 1000000
    1 <= A[i] <= 1000

    e.g. --> A = 2, 4, 1, 3, 2 get max iterate and add the differences.

Q5. Given an array of integers A, find and return the product array of the same size where the ith element of the product array will be equal to the product
    of all the elements divided by the ith element of the array.
    Note: It is always possible to form the product array with integer (32 bit) values. Solve it without using the division operator.

    A:      1,   2, 3, 4, 5
    preProd 1    2  6  24 120
    sufProd 120 120 60 20  5
    ans     120  60 40 30  24  preprod[i-1] * sufProd[i+1] = ans[i]

