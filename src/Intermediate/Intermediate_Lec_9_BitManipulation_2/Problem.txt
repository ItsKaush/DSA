Q1. Alex and Sam are good friends. Alex is doing a lot of programming these days. He has set a target score of A for himself.
    Initially, Alex's score was zero. Alex can double his score by doing a question, or Alex can seek help from Sam for doing questions that will contribute 1 to Alex's score.
    Alex wants his score to be precisely A. Also, he does not want to take much help from Sam.
    Find and return the minimum number of times Alex needs to take help from Sam to achieve a score of A.

    Problem Constraints
    0 <= A <= 10^9

    Observation: Alex can double his score only if A is even, otherwise he has to take help from Sam.
                Initial score of Alex is zero, means at start he had to take help from sam to get score 1.
                Then, depending on A is even or odd nex will be decided,
                It gets double from 1 then it will be 2, and again it will keep on getting double, means need to take right shift till it is A or less than A.
                keep doubling not working here. Not able to comeup with the idea.

                It seems that the ans is exactly the numbers of set bits in A's binary representation. So just need to find the number of set bits in A.



    Input Format: A : 5     Binary representation of A : 101
                 A = 0 take help from sam = 1
                 A = 1
                 A = 2 solve by himself
                 A = 4 solve by himself
                 A = 5 take help from sam = 1
                 Ans = 2

                 A : 6 Binary representation of A : 110
                 A = 0 take help from sam = 1
                 A = 1
                 A = 2 solve by himself
                 A = 3 take help from sam = 1
                 A = 6 solve himself
                 Ans = 2

                A : 9 Binary representation of A : 1001
                A : 10 Binary representation of A : 1010
                A : 11 Binary representation of A : 1011
                A : 12 Binary representation of A : 1100
                A : 13 Binary representation of A : 1101
                A : 14 Binary representation of A : 1110
                A : 15 Binary representation of A : 1111
                A : 1232 Binary representation of A : 10011010000

Q2. Alex has a cat named Boomer. He decides to put his cat to the test for eternity.
    He starts on day 1 with one stash of food unit, every next day, the stash doubles.
    If Boomer is well behaved during a particular day, only then she receives food worth equal to the stash produced on that day.
    Boomer receives a net worth of A units of food. What is the number of days she received the stash?

    Problem Constraints
    1 <= A <= 2^31-1

    Idea: Same need to find the number of set bits only.

Q3. Given an array of positive integers A, two integers appear only once, and all the other integers appear twice.
    Find the two integers that appear only once.
    Note: Return the two numbers in ascending order.

    Problem Constraints
    2 <= |A| <= 100000
    1 <= A[i] <= 10^9

    input: A : [1, 2, 3, 1, 2, 4]
        If take OXR of all elements then the final ans will be the XOR of both numbers required.
        ie. 3 ^ 4 = 7
        Now, need to find how will i be able to find the two numbers from this XOR.
        7 = 111
        3 = 011
        4 = 100

        7 ^ 3 = 4
        7 ^ 4 = 3

        find the rightMost set bit in 7, any one of the unique numbers bit will be set and other unique numbers bit will be unset.
        Also taking xor if having saem bit will cancel them out
        7 = 111
        i = 0;
        Iterate over array and check if the rightMost bit is set or not.
        If set then take xor with num1 else take xor with num 2, where num1 and num2 initially are 0.
        num1 = 0
        num2 = 0
        i = 0
        1 = 001
        ith bit is set take xor with num1 = 0 ^ 1 = 1
        2 = 010
        ith bit is not set take xor with num2 = 0 ^ 2 = 2
        3 = 011
        ith bit is set take xor with num1 = 1 ^ 3 = 2
        1 = 001
        ith bit is set take xor with num1 = 2 ^ 1 = 3
        2 = 010
        ith bit is not set take xor with num2 = 2 ^ 2 = 0
        4 = 100
        ith bit is not set take xor with num2 = 0 ^ 4 = 4

        Solution Approach: Take XOR of all teh elements of the array.
        Now, find the rightMost set bit in the XOR.
        Now, iterate over the array and check if the rightMost bit is set or not.
        If set then take xor with num1 else take xor with num 2, where num1 and num2 initially are 0.
        Finally, num1 and num2 will be the required numbers.



        XOR Properties:
        1. A ^ A = 0
        2. A ^ 0 = A
        3. A ^ B = B ^ A
        4. A ^ (B ^ C) = (A ^ B) ^ C
        5. A ^ B ^ A = B
        6. If A ^ B = C then A ^ C = B and B ^ C = A

    Q4. Richard Hendricks, a mastermind in compression algorithms, is an employee of Hooli in Silicon Valley.
        One day, he finally decided to quit and work on his new idea of the middle-out compression algorithm.

        He needed to work at the bit - level to compress data. He, eventually, encountered this problem.
        There is an array A of N integers. He has to perform certain operations on the elements.
        In any one operation, two indices i and j (i < j) are chosen, and A[i] is replaced with A[i] & A[j],
        and A[j] is replaced with A[i] | A[j], where & represents the Bitwise AND operation and | represents the Bitwise OR operation.
        This operation is performed over all the pairs of integers in the array.

        Help Richard find the Bitwise XOR of all the elements after performing the operations

        Problem Constraints
        1 <= N <= 10^5
        1 <= Ai <= 10^9

        Observation:= (A & B) ^ (A | B) = A ^ B

        So simpy take XOR of all the elements of the array and return the result.

    Q5. Problem Description
        Given an array B of length A with elements 1 or 0. Find the number of subarrays such that the bitwise OR of all the elements present in the subarray is 1.
        Note : The answer can be large. So, return type must be long.

        Problem Constraints
        1 <= A <= 10^5

        Idea: 1 ^ 1 = 0
              0 ^ 0 = 0
              1 ^ 0 = 1
              0 ^ 1 = 1

    Input: A = {1, 0, 1}
        pfOR=  1  1  0

           subarrays: 1, 0, 1, 10, 01, 101
           Xor      : 1, 0, 1,  1,  1,  1
           Ans = 5

           BruteForce: generate all the sub arrays and take their xor, if it is 1 then increment the count.
           TC: O(N^3) [n^2 for generating all the sub arrays and n for taking xor]

           Optimized: need to do it in O(N)
              1. need to find such subaaray which has all element 0.
              2. If there is one zero, then it can lead to only one subarray whose OR will be zero.
              3. If there are two zeros, then it can lead to two subarray whose OR will be zero, and also if both are continous then it will lead to one more subarray
                 whose OR will be zero
              4.Iterate over array and find teh count of zero, if next element is 1 then substarct the count(count+1)/2 from total suarrays.
              5. Also if the last elemetn is not 1 then also substracte the number of subarrays from total subarrays using count of zero.

    Input: A = {1, 0, 1, 0, 0, 1, 0}
                               i
           total subarrays = 21: 21 - (1*(1+1)/2) = 20: 20-(2*3/2)= 17
           count_zero = 2

           Failing for problem constrain 10^5.
