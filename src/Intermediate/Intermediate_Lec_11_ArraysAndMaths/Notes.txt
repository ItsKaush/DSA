Majority Element: if it occurred more than n/2 times.
                Can be solved by iterating in TC:O(N^2)
                If we sort and use the same idea to get the frequency of current element then TC:O(nlogn)

Moore's Voting Algorithm:
            Remove an element = Reduce its frequency
            Keep an element and its frequency
            increase frequency if encountered same element else decrease frequency
             eg: 3, 4, 4, 8, 4, 9, 4, 3, 4 element= 3, Frequemcy= 1
                    i                      element=3   Frequency = 0
                       i                   element=4   Frequency = 1
                          i                element=4   Frequency = 0
                             i             element=4   Frequency = 1
                                i          element=4   Frequency = 0
                                   i       element=4   Frequency = 1
                                      i    element=4   Frequency = 0
                                         i element=4   Frequency = 1

            At the end we will have element=4 and frequency=1, this is the majority element
            Pseudo Code: If freq is zero, majority element is current element and freq becomes 1
                         else if current element is not equal to majority element then freq is reduced by 1
                         else freq is increased by 1
                         at the end element inside majority element is the answer.

Josephus Problem: N People are standing in circle and every person killed its adjacent person standing clock wise and pass the knife to next person who will be the alive at end
        Observation: if N is power to 2 then whoever has the knife at start he will be alive
        Pseudo Code: if N is power to 2 then return 1
                     else find the nearest power to 2 less than N and return 2*(N-power to 2)+1


